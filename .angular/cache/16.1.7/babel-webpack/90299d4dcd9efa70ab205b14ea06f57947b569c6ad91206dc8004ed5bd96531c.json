{"ast":null,"code":"import _defineProperty from \"/Users/elmouhcadielbakalitahiri/dev/playground/angular/primeng-demo/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport * as i0 from \"@angular/core\";\nclass Cart {\n  constructor() {\n    _defineProperty(this, \"lines\", []);\n    _defineProperty(this, \"itemCount\", 0);\n    _defineProperty(this, \"cartPrice\", 0);\n  }\n  addLine(product, quantity = 1) {\n    let line = this.lines.find(line => line.product.id == product.id);\n    if (line != undefined) {\n      line.quantity += quantity;\n    } else {\n      this.lines.push(new CartLine(product, quantity));\n    }\n    this.recalculate();\n  }\n  updateQuantity(product, event) {\n    if (event) {\n      let line = this.lines.find(line => line.product.id == product.id);\n      if (line != undefined) {\n        line.quantity = Number(event.target.value);\n      }\n      this.recalculate();\n    }\n  }\n  removeLine(id) {\n    if (id) {\n      let index = this.lines.findIndex(line => line.product.id == id);\n      this.lines.splice(index, 1);\n      this.recalculate();\n    }\n  }\n  clear() {\n    this.lines = [];\n    this.itemCount = 0;\n    this.cartPrice = 0;\n  }\n  recalculate() {\n    this.itemCount = 0;\n    this.cartPrice = 0;\n    this.lines.forEach(l => {\n      this.itemCount += l.quantity;\n      this.cartPrice += l.quantity * l.product.price;\n    });\n  }\n}\n_defineProperty(Cart, \"\\u0275fac\", function Cart_Factory(t) {\n  return new (t || Cart)();\n});\n_defineProperty(Cart, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: Cart,\n  factory: Cart.ɵfac,\n  providedIn: \"root\"\n}));\nexport { Cart };\nexport class CartLine {\n  constructor(product, quantity) {\n    _defineProperty(this, \"product\", void 0);\n    _defineProperty(this, \"quantity\", void 0);\n    this.product = product;\n    this.quantity = quantity;\n  }\n  get lineTotal() {\n    if (this.product.price) {\n      return this.quantity * this.product.price;\n    } else {\n      return;\n    }\n  }\n}","map":{"version":3,"names":["Cart","constructor","_defineProperty","addLine","product","quantity","line","lines","find","id","undefined","push","CartLine","recalculate","updateQuantity","event","Number","target","value","removeLine","index","findIndex","splice","clear","itemCount","cartPrice","forEach","l","price","factory","ɵfac","providedIn","lineTotal"],"sources":["/Users/elmouhcadielbakalitahiri/dev/playground/angular/primeng-demo/src/app/domain/cart.model.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Product } from \"./product.model\";\n@Injectable({ providedIn: \"root\" })\nexport class Cart {\n  public lines: CartLine[] = [];\n  public itemCount: number = 0;\n  public cartPrice: number = 0;\n  addLine(product: Product, quantity: number = 1) {\n    let line = this.lines.find((line) => line.product.id == product.id);\n    if (line != undefined) {\n      line.quantity += quantity;\n    } else {\n      this.lines.push(new CartLine(product, quantity));\n    }\n    this.recalculate();\n  }\n  updateQuantity(product: Product, event: any) {\n    if (event) {\n      let line = this.lines.find((line) => line.product.id == product.id);\n      if (line != undefined) {\n        line.quantity = Number(event.target.value);\n      }\n      this.recalculate();\n    }\n  }\n  removeLine(id: any) {\n    if (id) {\n      let index = this.lines.findIndex((line) => line.product.id == id);\n      this.lines.splice(index, 1);\n      this.recalculate();\n    }\n  }\n  clear() {\n    this.lines = [];\n    this.itemCount = 0;\n    this.cartPrice = 0;\n  }\n  private recalculate() {\n    this.itemCount = 0;\n    this.cartPrice = 0;\n    this.lines.forEach((l: any) => {\n      this.itemCount += l.quantity;\n      this.cartPrice += l.quantity * l.product.price;\n    });\n  }\n}\nexport class CartLine {\n  constructor(public product: Product, public quantity: number) {}\n  get lineTotal() {\n    if (this.product.price) {\n      return this.quantity * this.product.price;\n    } else {\n      return;\n    }\n  }\n}\n"],"mappings":";;AAEA,MACaA,IAAI;EAAAC,YAAA;IAAAC,eAAA,gBACY,EAAE;IAAAA,eAAA,oBACF,CAAC;IAAAA,eAAA,oBACD,CAAC;EAAA;EAC5BC,OAAOA,CAACC,OAAgB,EAAEC,QAAA,GAAmB,CAAC;IAC5C,IAAIC,IAAI,GAAG,IAAI,CAACC,KAAK,CAACC,IAAI,CAAEF,IAAI,IAAKA,IAAI,CAACF,OAAO,CAACK,EAAE,IAAIL,OAAO,CAACK,EAAE,CAAC;IACnE,IAAIH,IAAI,IAAII,SAAS,EAAE;MACrBJ,IAAI,CAACD,QAAQ,IAAIA,QAAQ;KAC1B,MAAM;MACL,IAAI,CAACE,KAAK,CAACI,IAAI,CAAC,IAAIC,QAAQ,CAACR,OAAO,EAAEC,QAAQ,CAAC,CAAC;;IAElD,IAAI,CAACQ,WAAW,EAAE;EACpB;EACAC,cAAcA,CAACV,OAAgB,EAAEW,KAAU;IACzC,IAAIA,KAAK,EAAE;MACT,IAAIT,IAAI,GAAG,IAAI,CAACC,KAAK,CAACC,IAAI,CAAEF,IAAI,IAAKA,IAAI,CAACF,OAAO,CAACK,EAAE,IAAIL,OAAO,CAACK,EAAE,CAAC;MACnE,IAAIH,IAAI,IAAII,SAAS,EAAE;QACrBJ,IAAI,CAACD,QAAQ,GAAGW,MAAM,CAACD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC;;MAE5C,IAAI,CAACL,WAAW,EAAE;;EAEtB;EACAM,UAAUA,CAACV,EAAO;IAChB,IAAIA,EAAE,EAAE;MACN,IAAIW,KAAK,GAAG,IAAI,CAACb,KAAK,CAACc,SAAS,CAAEf,IAAI,IAAKA,IAAI,CAACF,OAAO,CAACK,EAAE,IAAIA,EAAE,CAAC;MACjE,IAAI,CAACF,KAAK,CAACe,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MAC3B,IAAI,CAACP,WAAW,EAAE;;EAEtB;EACAU,KAAKA,CAAA;IACH,IAAI,CAAChB,KAAK,GAAG,EAAE;IACf,IAAI,CAACiB,SAAS,GAAG,CAAC;IAClB,IAAI,CAACC,SAAS,GAAG,CAAC;EACpB;EACQZ,WAAWA,CAAA;IACjB,IAAI,CAACW,SAAS,GAAG,CAAC;IAClB,IAAI,CAACC,SAAS,GAAG,CAAC;IAClB,IAAI,CAAClB,KAAK,CAACmB,OAAO,CAAEC,CAAM,IAAI;MAC5B,IAAI,CAACH,SAAS,IAAIG,CAAC,CAACtB,QAAQ;MAC5B,IAAI,CAACoB,SAAS,IAAIE,CAAC,CAACtB,QAAQ,GAAGsB,CAAC,CAACvB,OAAO,CAACwB,KAAK;IAChD,CAAC,CAAC;EACJ;;gBAzCW5B,IAAI,e;mBAAJA,IAAI;AAAA;AAAAE,eAAA,CAAJF,IAAI,gB;SAAJA,IAAI;EAAA6B,OAAA,EAAJ7B,IAAI,CAAA8B,IAAA;EAAAC,UAAA,EADS;AAAM;SACnB/B,IAAI;AA2CjB,OAAM,MAAOY,QAAQ;EACnBX,YAAmBG,OAAgB,EAASC,QAAgB;IAAAH,eAAA;IAAAA,eAAA;IAAzC,KAAAE,OAAO,GAAPA,OAAO;IAAkB,KAAAC,QAAQ,GAARA,QAAQ;EAAW;EAC/D,IAAI2B,SAASA,CAAA;IACX,IAAI,IAAI,CAAC5B,OAAO,CAACwB,KAAK,EAAE;MACtB,OAAO,IAAI,CAACvB,QAAQ,GAAG,IAAI,CAACD,OAAO,CAACwB,KAAK;KAC1C,MAAM;MACL;;EAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}